<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>divisio</groupId>
  <artifactId>dl4jintro</artifactId>
  <version>1.0-SNAPSHOT</version>

  <name>dl4jintro</name>
  <url>https://divis.io</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <dl4j.version>1.0.0-beta2</dl4j.version>
  </properties>

  <dependencies>
    <!-- for comfortable command line args parsing -->
    <dependency>
      <groupId>com.beust</groupId>
      <artifactId>jcommander</artifactId>
      <version>1.72</version>
    </dependency>
    <!-- Logger implementation -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.0.13</version>
    </dependency>
    <!-- Default JUnit in case we need unit tests -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>
    <!-- DL4J basic dependency -->
    <dependency>
      <groupId>org.deeplearning4j</groupId>
      <artifactId>deeplearning4j-core</artifactId>
      <version>${dl4j.version}</version>
    </dependency>
    <!-- ND4J does the computations under the hood. Here we use the CPU implementation, add a CUDA plattform for
     GPU support, e.g.: nd4j-cuda-8.0-platform You can add both dependencies at the same time, in which case
     GPUs are used if possible, otherwise we fall back to CPU. -->
    <dependency>
      <groupId>org.nd4j</groupId>
      <artifactId>nd4j-native-platform</artifactId>
      <version>${dl4j.version}</version>
    </dependency>
    <!-- Datavec can be used for data loading and preprocessing. It it not mandatory but provides a lot of
    out-of-the-box data preprocessing, so it is useful for standard tasks. -->
    <dependency>
      <groupId>org.datavec</groupId>
      <artifactId>datavec-api</artifactId>
      <version>${dl4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.datavec</groupId>
      <artifactId>datavec-spark_2.11</artifactId>
      <version>${dl4j.version}_spark_2</version>
    </dependency>
    <dependency>
      <groupId>org.datavec</groupId>
      <artifactId>datavec-local</artifactId>
      <version>${dl4j.version}</version>
    </dependency>
    <!-- Glue library necessary for sending training data to the dl4j ui server -->
    <dependency>
      <groupId>org.deeplearning4j</groupId>
      <artifactId>deeplearning4j-ui-model</artifactId>
      <version>${dl4j.version}</version>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.7.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.20.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>

        <!--
        Custom CLI configuration for dependency copying that filters out 300MB of native dependencies.
        Use this task to create a directory with dependencies to sync with another machine. That way, you can quickly
        update the main jar containing no dependencies and just deploy the dependencies separately if needed.
        mvn dependency:copy-dependencies
        -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>3.1.0</version>
          <executions>
            <execution>
              <id>default-cli</id>
              <configuration>
                <outputDirectory>${project.build.directory}/dependencies</outputDirectory>
                <overWriteReleases>false</overWriteReleases>
                <overWriteSnapshots>false</overWriteSnapshots>
                <overWriteIfNewer>true</overWriteIfNewer>
                <excludeClassifiers>android-x86,android-x86_64,android-arm,android-arm64,ios-arm,ios-arm64,ios-x86,ios-x86_64,linux-arm,linux-armhf,linux-ppc64le,linux-x86,windows-x86</excludeClassifiers>
              </configuration>
            </execution>
          </executions>
        </plugin>

      </plugins>
    </pluginManagement>
  </build>
</project>
